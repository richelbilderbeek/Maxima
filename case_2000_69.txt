/* Maxima batch file */

/* Load libraries */
load("stringproc")$

/* Input filename */
bash_filename:"case_2000_69.sh"$
maxima_filename:"case_2000_69.txt"$ /* this file */

/* Output filenames */
tex_filename:"case_2000_69_output.tex"$

/* Write results to TeX file */
stream: openw(tex_filename)$
printf(stream,"\\documentclass{article}~%")$
printf(stream,"~%")$
printf(stream,"\\usepackage{listings}~%")$
printf(stream,"\\usepackage{graphicx}~%")$
printf(stream,"~%")$
printf(stream,"\\title{Case 2000 page 69 exercise}~%")$
printf(stream,"\\author{Richel Bilderbeek}~%")$
printf(stream,"\\date{\\today}~%")$
printf(stream,"~%")$
printf(stream,"\\begin{document}~%")$
printf(stream,"~%")$
printf(stream,"\\maketitle~%")$
printf(stream,"~%")$
printf(stream,"\\begin{abstract}~%")$
printf(stream,"This article is created within the CAS program Maxima~%")$
printf(stream,"and shows how to the exercise of \\cite{case2000} at page 69.~%")$
printf(stream,"\\end{abstract}~%")$
printf(stream,"~%")$
printf(stream,"\\section{Introduction}~%")$
printf(stream,"~%")$
printf(stream,"\\LaTeX~~is commonly used for writing publishable scientific articles\\cite{gaudeul2006}.~%")$
printf(stream,"Algebraic manipulations can be done by a CAS, for example Maxima, Maple or Mathematica.~%")$
printf(stream,"Maxima is the only free and open-source program, and it is the oldest free and open-source computer algebra system, with development started in 1967 (as Macsyma) or 1982 (as MAXIMA).~%")$
printf(stream,"This article is an example of writing a \\LaTeX~~ article within Maxima~%")$
printf(stream,"~%")$
printf(stream,"\\section{Exercise}~%")$
printf(stream,"~%")$
printf(stream,"\\begin{table}[here]~%")$
printf(stream,"  \\centering~%")$
printf(stream,"  \\begin{tabular}{ | r | l | }~%")$
printf(stream,"    \\hline~%")$
printf(stream,"    symbol & description \\\\~%")$
printf(stream,"    \\hline~%")$
printf(stream,"    $I$ & Indentity matrix \\\\~%")$
printf(stream,"    $L$ & Leslie matrix \\\\~%")$
printf(stream,"    $M$ & Leslie matrix with $\\lambda$ subtracted at diagonal \\\\~%")$
printf(stream,"    $x$ & population density vector \\\\~%")$
printf(stream,"    $Z$ & Vector filled with zeroes \\\\~%")$
printf(stream,"    $\\lambda$ & population growth rate \\\\~%")$
printf(stream,"    \\hline~%")$
printf(stream,"  \\end{tabular}~%")$
printf(stream,"  \\caption{Definitions}~%")$
printf(stream,"  \\label{table:table_definition}~%")$
printf(stream,"\\end{table}~%")$
printf(stream,"~%")$
printf(stream,"The equations to solve are:~%")$

Eq3_21(L,x,lambda) := L * x = lambda * x;

printf(stream,"\\begin{equation}~%")$
printf(stream,tex1(Eq3_21(L,x,lambda)))$ /* Use tex1 instead of tex(...,false) for non $$-enclosed output */
printf(stream,"\\label{eq:eq3_21}~%")$
printf(stream,"\\end{equation}~%")$

Eq3_23(M,x,Z) := M * x = Z;
Eq3_23_str:tex1(Eq3_23(M,x,Z));

printf(stream,"\\begin{equation}~%")$
printf(stream,tex1(Eq3_23(M,x,Z)))$ /* Use tex1 instead of tex(...,false) for non $$-enclosed output */
printf(stream,"\\label{eq:eq3_23}~%")$
printf(stream,"\\end{equation}~%")$

printf(stream,"~%")$
printf(stream,"Equation \\ref{eq:eq3_21} equals equation 3.21 of \\cite{case2000}~%")$
printf(stream,"Equation \\ref{eq:eq3_23} equals equation 3.23 of \\cite{case2000}~%")$
printf(stream,"(for definitions see table \\ref{table:table_definition} on page \\pageref{table:table_definition}).~%")$
printf(stream,"The Leslie matrix, L,  given in this exercise is:~%")$
printf(stream,"~%")$

L:matrix([1.0,1.0],[0.8,0.8]);

printf(stream,"\\begin{equation}~%")$
printf(stream,"L=")$
printf(stream,tex1(L))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$
printf(stream,"The simplifies equation \\ref{eq:eq3_21} to:~%")$
printf(stream,"~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,tex1(Eq3_21(L,x,lambda)))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$
printf(stream,"Solving equation \\ref{eq:eq3_21} can be done with equation \\ref{eq:eq3_24}:~%")$
printf(stream,"~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"det(L - \\lambda*I) = Z~%")$
printf(stream,"\\label{eq:eq3_24}~%")$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$

I:ident(2);
Z:zeromatrix(2,1);

printf(stream,"Equation \\ref{eq:eq3_24} equals equation 3.24 of \\cite{case2000},~%")$
printf(stream,"where I is the identity matrix:~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"I=")$
printf(stream,tex1(I))$
printf(stream,"\\end{equation}~%")$
printf(stream,"And Z is the vector of zeroes:~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"Z=")$
printf(stream,tex1(Z))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$

Eq3_24(L,lambda,I,Z) := det(L - lambda * I) = Z;

printf(stream,"This simplifies equation \\ref{eq:eq3_24} to:~%")$
printf(stream,"~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,tex1(Eq3_24(L,lambda,I,Z)))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$

/* Great that M is in Eq3_24_b, but I cannot get it out, so I do it manually*/
M:copymatrix(L);
M[1][1] : M[1][1] - lambda;
M[2][2] : M[2][2] - lambda;

printf(stream,"~%")$
printf(stream,"The determinant of that matrix ($M$), is:~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"det(")$
printf(stream,tex1(M))$
printf(stream,")=")$
printf(stream,tex1(determinant(M)))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$

stable_lambdas : solve(determinant(M) = 0,lambda);

printf(stream,"~%")$
printf(stream,"Solving $M=0$, the $\\lambda$s found are:~%")$
printf(stream,"~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,tex1(stable_lambdas))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$
printf(stream,"There is one stable population structure, $\\lambda=0$, which is~%")$
printf(stream,"denotes an extinct population.~%")$

lambda:rhs(stable_lambdas[1]);

printf(stream,"Here I focus on the more interesting value,~%")$
printf(stream,"where $\\lambda=")$
printf(stream,string(lambda))$ /* Don't forget the string function */
printf(stream,"$.~%")$
printf(stream,"This lambda is called the dominant eigenvalue, which equals the ultimate population growth.~%")$
printf(stream,"~%")$

M:''(M); /* Filling it in */

printf(stream,"Put $\\lambda$ in M, this results in:~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"M=")$
printf(stream,tex1(M))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$


printf(stream,"Now we can solve the $x$ of equation \\ref{eq:eq3_23} (equals 3.23 from \\cite{case2000}),~%")$
printf(stream,"which was this:~%")$
printf(stream,"~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,Eq3_23_str)$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$
printf(stream,"This equation is unsolvable, unless we assign a value to an element of $x$.~%")$
printf(stream,"Here, I put $1.0$ as the initial value of $x$ its first element.~%")$
printf(stream,"(it will be rescaled later):~%")$
printf(stream,"~%")$

x:transpose(matrix([1.0,x2]));

printf(stream,"\\begin{equation}~%")$
printf(stream,"x = ")$
printf(stream,tex1(x))$
printf(stream,"\\end{equation}~%")$

EqSolve(M,x,Z):= M.x = Z;

printf(stream,"Putting this $x$ in equation \\ref{eq:eq3_23}:~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"M * x = ")$
printf(stream,tex1(lhs(EqSolve(M,x,Z))))$
printf(stream,"= ")$
printf(stream,tex1(Z))$
printf(stream,"\\end{equation}~%")$
printf(stream,"As our matrix has two rows, there are two equations that can be solved:~%")$

q:''(M.x)[1,1];
x2:rhs(solve(q)[1]);

printf(stream,"Solving the upper, results in $x2=")$
printf(stream,string(x2))$
printf(stream,"$.~%")$
printf(stream,"This results in an $x$ of:~%")$

x;
x:''(x);

printf(stream,"\\begin{equation}~%")$
printf(stream,"x = ")$
printf(stream,tex1(x))$
printf(stream,"\\end{equation}~%")$
printf(stream,"$x$ must be rescaled so that its sum equals $1.0$.~%")$

sz: matrix_size(x);
my_sum: sum(sum(x[i,j],i,1,sz[1]),j,1,sz[2]);

printf(stream,"$x$ its current sum is $")$
printf(stream,string(my_sum))$
printf(stream,"$, so dividing all elements by it, results in an $x$ of:~%")$

x:x/my_sum;
x;

printf(stream,"\\begin{equation}~%")$
printf(stream,"x = ")$
printf(stream,tex1(x))$
printf(stream,"\\end{equation}~%")$

/* Conclusion */

printf(stream,"\\section{Conclusion}~%")$
printf(stream,"~%")$
printf(stream,"For this Leslie matrix:~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,tex1(L))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$
printf(stream,"The dominant eigenvalue, $\\lambda$, is:~%")$
printf(stream,"\\\\\\\\~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"\\lambda = ")$
printf(stream,string(lambda))$ /* Don't forget the string function */
printf(stream,"\\end{equation}~%")$
printf(stream,"\\\\~%")$
printf(stream,"~%")$
printf(stream,"The stable population size distribution is:~%")$
printf(stream,"~%")$
printf(stream,"\\begin{equation}~%")$
printf(stream,"x = ")$
printf(stream,tex1(x))$
printf(stream,"\\end{equation}~%")$
printf(stream,"~%")$

/* Discussion */

printf(stream,"\\section{Discussion}~%")$
printf(stream,"~%")$
printf(stream,"Writing \\LaTeX~~within Maxima can be done, but it is a bit cumbersome:~%")$
printf(stream,"Maxima does not know \\LaTeX~~syntax and just creates contextless strings,~%")$
printf(stream,"which might not be compilable by \\LaTeX.~%")$
printf(stream,"However, because the script does create a .tex file,~%")$
printf(stream,"this file can be inspected easily with a \\LaTeX~~tool like texmaker.~%")$
printf(stream,"~%")$

/* Bibliography */

printf(stream,"\\begin{thebibliography}{9}~%")$
printf(stream,"~%")$
printf(stream,"\\bibitem{case2000}~%")$
printf(stream,"  Case, Ted J.~%")$
printf(stream,"  2000~%")$
printf(stream,"  An illustrated guide to theoretical ecology.~%")$
printf(stream,"~%")$
printf(stream,"\\bibitem{gaudeul2006}~%")$
printf(stream,"  Gaudeul, A.~%")$
printf(stream,"  2006~%")$
printf(stream,"  Do Open Source Developers Respond to Competition?: The (La)TeX Case Study.~%")$
printf(stream,"  Available at SSRN: http://ssrn.com/abstract=908946 or http://dx.doi.org/10.2139/ssrn.908946~%")$
printf(stream,"~%")$
printf(stream,"\\end{thebibliography}~%")$
printf(stream,"~%")$

/* Appendix */

printf(stream,"\\appendix~%")$
printf(stream,"~%")$
printf(stream,"\\section{Script file}~%")$
printf(stream,"~%")$
printf(stream,"\\lstinputlisting[language=C++,showstringspaces=false,breaklines=true,frame=single]{")$
printf(stream,bash_filename)$
printf(stream,"}~%")$
printf(stream,"~%")$
printf(stream,"\\section{Maxima file}~%")$
printf(stream,"~%")$
printf(stream,"\\lstinputlisting[language=C++,showstringspaces=false,breaklines=true,frame=single]{")$
printf(stream,maxima_filename)$
printf(stream,"}~%")$
printf(stream,"~%")$
printf(stream,"\\section{\\LaTeX~~file}~%")$
printf(stream,"~%")$
printf(stream,"\\lstinputlisting[language=tex,showstringspaces=false,breaklines=true,frame=single]{")$
printf(stream,tex_filename)$
printf(stream,"}~%")$
printf(stream,"~%")$
printf(stream,"\\end{document}~%")$
close(stream)$